#include "definitionsInternal.h"
#include "supportCode.h"

struct MergedNeuronUpdateGroup0
 {
    unsigned int* spkCnt;
    unsigned int* spk;
    unsigned int numNeurons;
    
}
;
struct MergedNeuronUpdateGroup1
 {
    unsigned int* spkCnt;
    unsigned int* spk;
    int32_t* i;
    double* V;
    double* g_eKC_eKC;
    double* g_iKC_eKC;
    double* h;
    double* m;
    double* n;
    double* lastspike;
    char* not_refractory;
    double* inSynInSyn0;
    double* inSynInSyn1;
    unsigned int numNeurons;
    
}
;
struct MergedNeuronUpdateGroup2
 {
    unsigned int* spkCnt;
    unsigned int* spk;
    int32_t* i;
    double* V;
    double* g_PN_iKC;
    double* h;
    double* m;
    double* n;
    double* lastspike;
    char* not_refractory;
    double* inSynInSyn0;
    unsigned int numNeurons;
    
}
;
struct MergedNeuronSpikeQueueUpdateGroup0
 {
    unsigned int* spkCnt;
    
}
;
__device__ __constant__ MergedNeuronSpikeQueueUpdateGroup0 d_mergedNeuronSpikeQueueUpdateGroup0[3];
void pushMergedNeuronSpikeQueueUpdateGroup0ToDevice(unsigned int idx, unsigned int* spkCnt) {
    MergedNeuronSpikeQueueUpdateGroup0 group = {spkCnt, };
    CHECK_CUDA_ERRORS(cudaMemcpyToSymbolAsync(d_mergedNeuronSpikeQueueUpdateGroup0, &group, sizeof(MergedNeuronSpikeQueueUpdateGroup0), idx * sizeof(MergedNeuronSpikeQueueUpdateGroup0)));
}
__device__ __constant__ MergedNeuronUpdateGroup0 d_mergedNeuronUpdateGroup0[1];
void pushMergedNeuronUpdateGroup0ToDevice(unsigned int idx, unsigned int* spkCnt, unsigned int* spk, unsigned int numNeurons) {
    MergedNeuronUpdateGroup0 group = {spkCnt, spk, numNeurons, };
    CHECK_CUDA_ERRORS(cudaMemcpyToSymbolAsync(d_mergedNeuronUpdateGroup0, &group, sizeof(MergedNeuronUpdateGroup0), idx * sizeof(MergedNeuronUpdateGroup0)));
}
__device__ __constant__ MergedNeuronUpdateGroup1 d_mergedNeuronUpdateGroup1[1];
void pushMergedNeuronUpdateGroup1ToDevice(unsigned int idx, unsigned int* spkCnt, unsigned int* spk, int32_t* i, double* V, double* g_eKC_eKC, double* g_iKC_eKC, double* h, double* m, double* n, double* lastspike, char* not_refractory, double* inSynInSyn0, double* inSynInSyn1, unsigned int numNeurons) {
    MergedNeuronUpdateGroup1 group = {spkCnt, spk, i, V, g_eKC_eKC, g_iKC_eKC, h, m, n, lastspike, not_refractory, inSynInSyn0, inSynInSyn1, numNeurons, };
    CHECK_CUDA_ERRORS(cudaMemcpyToSymbolAsync(d_mergedNeuronUpdateGroup1, &group, sizeof(MergedNeuronUpdateGroup1), idx * sizeof(MergedNeuronUpdateGroup1)));
}
__device__ __constant__ MergedNeuronUpdateGroup2 d_mergedNeuronUpdateGroup2[1];
void pushMergedNeuronUpdateGroup2ToDevice(unsigned int idx, unsigned int* spkCnt, unsigned int* spk, int32_t* i, double* V, double* g_PN_iKC, double* h, double* m, double* n, double* lastspike, char* not_refractory, double* inSynInSyn0, unsigned int numNeurons) {
    MergedNeuronUpdateGroup2 group = {spkCnt, spk, i, V, g_PN_iKC, h, m, n, lastspike, not_refractory, inSynInSyn0, numNeurons, };
    CHECK_CUDA_ERRORS(cudaMemcpyToSymbolAsync(d_mergedNeuronUpdateGroup2, &group, sizeof(MergedNeuronUpdateGroup2), idx * sizeof(MergedNeuronUpdateGroup2)));
}
// ------------------------------------------------------------------------
// merged extra global parameter functions
// ------------------------------------------------------------------------
// ------------------------------------------------------------------------
// merged extra global parameter functions
// ------------------------------------------------------------------------
__device__ __constant__ unsigned int d_mergedNeuronUpdateGroupStartID0[] = {0, };
__device__ __constant__ unsigned int d_mergedNeuronUpdateGroupStartID1[] = {128, };
__device__ __constant__ unsigned int d_mergedNeuronUpdateGroupStartID2[] = {256, };

extern "C" __global__ void neuronSpikeQueueUpdateKernel() {
    const unsigned int id = 32 * blockIdx.x + threadIdx.x;
    if(id < 3) {
        struct MergedNeuronSpikeQueueUpdateGroup0 *group = &d_mergedNeuronSpikeQueueUpdateGroup0[id - 0]; 
        group->spkCnt[0] = 0;
    }
}

extern "C" __global__ void updateNeuronsKernel(double t)
 {
    const unsigned int id = 32 * blockIdx.x + threadIdx.x; 
    __shared__ unsigned int shSpk[32];
    __shared__ unsigned int shPosSpk;
    __shared__ unsigned int shSpkCount;
    if (threadIdx.x == 0) {
        shSpkCount = 0;
    }
    
    __syncthreads();
    // merged0
    if(id < 128) {
        struct MergedNeuronUpdateGroup0 *group = &d_mergedNeuronUpdateGroup0[0]; 
        const unsigned int lid = id - 0;
        
        if(lid < group->numNeurons) {
            
            // test whether spike condition was fulfilled previously
            // calculate membrane potential
            
            // test for and register a true spike
            if (0) {
                const unsigned int spkIdx = atomicAdd(&shSpkCount, 1);
                shSpk[spkIdx] = lid;
            }
        }
        __syncthreads();
        if(threadIdx.x == 0) {
            if (shSpkCount > 0) {
                shPosSpk = atomicAdd(&group->spkCnt[0], shSpkCount);
            }
        }
        __syncthreads();
        if(threadIdx.x < shSpkCount) {
            const unsigned int n = shSpk[threadIdx.x];
            group->spk[shPosSpk + threadIdx.x] = n;
        }
    }
    // merged1
    if(id >= 128 && id < 256) {
        struct MergedNeuronUpdateGroup1 *group = &d_mergedNeuronUpdateGroup1[0]; 
        const unsigned int lid = id - 128;
        
        if(lid < group->numNeurons) {
            int32_t li = group->i[lid];
            double lV = group->V[lid];
            double lg_eKC_eKC = group->g_eKC_eKC[lid];
            double lg_iKC_eKC = group->g_iKC_eKC[lid];
            double lh = group->h[lid];
            double lm = group->m[lid];
            double ln = group->n[lid];
            double llastspike = group->lastspike[lid];
            char lnot_refractory = group->not_refractory[lid];
            
            double Isyn = 0;
             {
                // pull inSyn values in a coalesced access
                double linSyn = group->inSynInSyn0[lid];
                Isyn += 0; lg_eKC_eKC += linSyn; linSyn= 0;
                
                group->inSynInSyn0[lid] = linSyn;
            }
             {
                // pull inSyn values in a coalesced access
                double linSyn = group->inSynInSyn1[lid];
                Isyn += 0; lg_iKC_eKC += linSyn; linSyn= 0;
                
                group->inSynInSyn1[lid] = linSyn;
            }
            using namespace NeuronUpdateSupportCode0;
            // test whether spike condition was fulfilled previously
            // calculate membrane potential
            // Update "constant over DT" subexpressions (if any)
            
            
            
            // PoissonInputs targetting this group (if any)
            
            
            
            // Update state variables and the threshold condition
            
            lnot_refractory = lnot_refractory || (! (lV > (0.0 * (1.00000000000000002e-03))));
            double _BA_V = 1.0*(((((1.0*(((1.0 * (-9.50000000000000011e-02)) * (1.42999999999999986e-06)) * (_brian_pow(ln, 4.0)))/(2.99999999999999998e-10)) + (1.0*((((1.0 * (5.00000000000000028e-02)) * (7.15000000000000015e-06)) * lh) * (_brian_pow(lm, 3.0)))/(2.99999999999999998e-10))) + (1.0*((1.0 * (0.00000000000000000e+00)) * lg_iKC_eKC)/(2.99999999999999998e-10))) + (1.0*((1.0 * (-9.19999999999999984e-02)) * lg_eKC_eKC)/(2.99999999999999998e-10))) + (1.0*((1.0 * (-6.35600000000000054e-02)) * (2.67000000000000009e-08))/(2.99999999999999998e-10)))/(((((1.0*(((- 1.0) * (1.42999999999999986e-06)) * (_brian_pow(ln, 4.0)))/(2.99999999999999998e-10)) - (1.0*(((1.0 * (7.15000000000000015e-06)) * lh) * (_brian_pow(lm, 3.0)))/(2.99999999999999998e-10))) - (1.0*(1.0 * lg_eKC_eKC)/(2.99999999999999998e-10))) - (1.0*(1.0 * lg_iKC_eKC)/(2.99999999999999998e-10))) - (1.0*(1.0 * (2.67000000000000009e-08))/(2.99999999999999998e-10)));
            double _V = (- _BA_V) + ((lV + _BA_V) * exp(DT * (((((1.0*(((- 1.0) * (1.42999999999999986e-06)) * (_brian_pow(ln, 4.0)))/(2.99999999999999998e-10)) - (1.0*(((1.0 * (7.15000000000000015e-06)) * lh) * (_brian_pow(lm, 3.0)))/(2.99999999999999998e-10))) - (1.0*(1.0 * lg_eKC_eKC)/(2.99999999999999998e-10))) - (1.0*(1.0 * lg_iKC_eKC)/(2.99999999999999998e-10))) - (1.0*(1.0 * (2.67000000000000009e-08))/(2.99999999999999998e-10)))));
            double _g_eKC_eKC = lg_eKC_eKC * exp(1.0*(- DT)/(5.00000000000000010e-03));
            double _g_iKC_eKC = lg_iKC_eKC * exp(1.0*(- DT)/(1.00000000000000002e-02));
            double _BA_h = 1.0*((0.329137207652868 * exp(1.0*((- 0.0555555555555556) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.0555555555555556 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))/((1.00000000000000002e-03) * ((1.0*(- 4.0)/((1.00000000000000002e-03) + (((2980.95798704173 * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))) - (1.0*((0.329137207652868 * exp(1.0*((- 0.0555555555555556) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.0555555555555556 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))/(1.00000000000000002e-03))));
            double _h = (- _BA_h) + ((_BA_h + lh) * exp(DT * ((1.0*(- 4.0)/((1.00000000000000002e-03) + (((2980.95798704173 * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))) - (1.0*((0.329137207652868 * exp(1.0*((- 0.0555555555555556) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.0555555555555556 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))/(1.00000000000000002e-03)))));
            double _BA_m = 1.0*(((1.0*((- 0.32) * lV)/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))) + (1.0*(0.32 * (-6.30000000000000004e-02))/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) + (1.0*(4.16 * (1.00000000000000002e-03))/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))))/((((((1.0*((- 0.28) * lV)/(((((0.000335462627902512 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*(0.2 * lV)/(1.00000000000000002e-03))) * exp(1.0*((- 0.2) * (-6.30000000000000004e-02))/(1.00000000000000002e-03))) - ((1.0 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)))) + (1.0*(0.32 * lV)/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) + (1.0*(0.28 * (-6.30000000000000004e-02))/(((((0.000335462627902512 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*(0.2 * lV)/(1.00000000000000002e-03))) * exp(1.0*((- 0.2) * (-6.30000000000000004e-02))/(1.00000000000000002e-03))) - ((1.0 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03))))) - (1.0*(0.32 * (-6.30000000000000004e-02))/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) + (1.0*(11.2 * (1.00000000000000002e-03))/(((((0.000335462627902512 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*(0.2 * lV)/(1.00000000000000002e-03))) * exp(1.0*((- 0.2) * (-6.30000000000000004e-02))/(1.00000000000000002e-03))) - ((1.0 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03))))) - (1.0*(4.16 * (1.00000000000000002e-03))/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))));
            double _m = (- _BA_m) + ((_BA_m + lm) * exp(DT * ((((((1.0*((- 0.28) * lV)/(((((0.000335462627902512 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*(0.2 * lV)/(1.00000000000000002e-03))) * exp(1.0*((- 0.2) * (-6.30000000000000004e-02))/(1.00000000000000002e-03))) - ((1.0 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)))) + (1.0*(0.32 * lV)/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) + (1.0*(0.28 * (-6.30000000000000004e-02))/(((((0.000335462627902512 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*(0.2 * lV)/(1.00000000000000002e-03))) * exp(1.0*((- 0.2) * (-6.30000000000000004e-02))/(1.00000000000000002e-03))) - ((1.0 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03))))) - (1.0*(0.32 * (-6.30000000000000004e-02))/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) + (1.0*(11.2 * (1.00000000000000002e-03))/(((((0.000335462627902512 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*(0.2 * lV)/(1.00000000000000002e-03))) * exp(1.0*((- 0.2) * (-6.30000000000000004e-02))/(1.00000000000000002e-03))) - ((1.0 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03))))) - (1.0*(4.16 * (1.00000000000000002e-03))/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))))));
            double _BA_n = 1.0*(((1.0*((- 0.032) * lV)/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))) + (1.0*(0.032 * (-6.30000000000000004e-02))/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) + (1.0*(0.48 * (1.00000000000000002e-03))/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))))/((((1.0*(0.032 * lV)/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))) - (1.0*(0.032 * (-6.30000000000000004e-02))/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) - (1.0*(0.48 * (1.00000000000000002e-03))/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) - (1.0*((0.642012708343871 * exp(1.0*((- 0.025) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.025 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))/(1.00000000000000002e-03)));
            double _n = (- _BA_n) + ((_BA_n + ln) * exp(DT * ((((1.0*(0.032 * lV)/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))) - (1.0*(0.032 * (-6.30000000000000004e-02))/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) - (1.0*(0.48 * (1.00000000000000002e-03))/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) - (1.0*((0.642012708343871 * exp(1.0*((- 0.025) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.025 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))/(1.00000000000000002e-03)))));
            lV = _V;
            lg_eKC_eKC = _g_eKC_eKC;
            lg_iKC_eKC = _g_iKC_eKC;
            lh = _h;
            lm = _m;
            ln = _n;
            char _cond = (lV > (0.0 * (1.00000000000000002e-03))) && lnot_refractory;
            // test for and register a true spike
            if (_cond) {
                const unsigned int spkIdx = atomicAdd(&shSpkCount, 1);
                shSpk[spkIdx] = lid;
                // spike reset code
                llastspike = t;
                lnot_refractory = false;
            }
            group->i[lid] = li;
            group->V[lid] = lV;
            group->g_eKC_eKC[lid] = lg_eKC_eKC;
            group->g_iKC_eKC[lid] = lg_iKC_eKC;
            group->h[lid] = lh;
            group->m[lid] = lm;
            group->n[lid] = ln;
            group->lastspike[lid] = llastspike;
            group->not_refractory[lid] = lnot_refractory;
        }
        __syncthreads();
        if(threadIdx.x == 0) {
            if (shSpkCount > 0) {
                shPosSpk = atomicAdd(&group->spkCnt[0], shSpkCount);
            }
        }
        __syncthreads();
        if(threadIdx.x < shSpkCount) {
            const unsigned int n = shSpk[threadIdx.x];
            group->spk[shPosSpk + threadIdx.x] = n;
        }
    }
    // merged2
    if(id >= 256 && id < 2784) {
        struct MergedNeuronUpdateGroup2 *group = &d_mergedNeuronUpdateGroup2[0]; 
        const unsigned int lid = id - 256;
        
        if(lid < group->numNeurons) {
            int32_t li = group->i[lid];
            double lV = group->V[lid];
            double lg_PN_iKC = group->g_PN_iKC[lid];
            double lh = group->h[lid];
            double lm = group->m[lid];
            double ln = group->n[lid];
            double llastspike = group->lastspike[lid];
            char lnot_refractory = group->not_refractory[lid];
            
            double Isyn = 0;
             {
                // pull inSyn values in a coalesced access
                double linSyn = group->inSynInSyn0[lid];
                Isyn += 0; lg_PN_iKC += linSyn; linSyn= 0;
                
                group->inSynInSyn0[lid] = linSyn;
            }
            using namespace NeuronUpdateSupportCode0;
            // test whether spike condition was fulfilled previously
            // calculate membrane potential
            // Update "constant over DT" subexpressions (if any)
            
            
            
            // PoissonInputs targetting this group (if any)
            
            
            
            // Update state variables and the threshold condition
            
            lnot_refractory = lnot_refractory || (! (lV > (0 * (1.00000000000000002e-03))));
            double _BA_V = 1.0*((((1.0*(((1.0 * (-9.50000000000000011e-02)) * (1.42999999999999986e-06)) * (_brian_pow(ln, 4.0)))/(2.99999999999999998e-10)) + (1.0*((((1.0 * (5.00000000000000028e-02)) * (7.15000000000000015e-06)) * lh) * (_brian_pow(lm, 3.0)))/(2.99999999999999998e-10))) + (1.0*((1.0 * (0.00000000000000000e+00)) * lg_PN_iKC)/(2.99999999999999998e-10))) + (1.0*((1.0 * (-6.35600000000000054e-02)) * (2.67000000000000009e-08))/(2.99999999999999998e-10)))/((((1.0*(((- 1.0) * (1.42999999999999986e-06)) * (_brian_pow(ln, 4.0)))/(2.99999999999999998e-10)) - (1.0*(((1.0 * (7.15000000000000015e-06)) * lh) * (_brian_pow(lm, 3.0)))/(2.99999999999999998e-10))) - (1.0*(1.0 * lg_PN_iKC)/(2.99999999999999998e-10))) - (1.0*(1.0 * (2.67000000000000009e-08))/(2.99999999999999998e-10)));
            double _V = (- _BA_V) + ((lV + _BA_V) * exp(DT * ((((1.0*(((- 1.0) * (1.42999999999999986e-06)) * (_brian_pow(ln, 4.0)))/(2.99999999999999998e-10)) - (1.0*(((1.0 * (7.15000000000000015e-06)) * lh) * (_brian_pow(lm, 3.0)))/(2.99999999999999998e-10))) - (1.0*(1.0 * lg_PN_iKC)/(2.99999999999999998e-10))) - (1.0*(1.0 * (2.67000000000000009e-08))/(2.99999999999999998e-10)))));
            double _g_PN_iKC = lg_PN_iKC * exp(1.0*(- DT)/(2.00000000000000004e-03));
            double _BA_h = 1.0*((0.329137207652868 * exp(1.0*((- 0.0555555555555556) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.0555555555555556 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))/((1.00000000000000002e-03) * ((1.0*(- 4.0)/((1.00000000000000002e-03) + (((2980.95798704173 * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))) - (1.0*((0.329137207652868 * exp(1.0*((- 0.0555555555555556) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.0555555555555556 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))/(1.00000000000000002e-03))));
            double _h = (- _BA_h) + ((_BA_h + lh) * exp(DT * ((1.0*(- 4.0)/((1.00000000000000002e-03) + (((2980.95798704173 * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))) - (1.0*((0.329137207652868 * exp(1.0*((- 0.0555555555555556) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.0555555555555556 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))/(1.00000000000000002e-03)))));
            double _BA_m = 1.0*(((1.0*((- 0.32) * lV)/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))) + (1.0*(0.32 * (-6.30000000000000004e-02))/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) + (1.0*(4.16 * (1.00000000000000002e-03))/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))))/((((((1.0*((- 0.28) * lV)/(((((0.000335462627902512 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*(0.2 * lV)/(1.00000000000000002e-03))) * exp(1.0*((- 0.2) * (-6.30000000000000004e-02))/(1.00000000000000002e-03))) - ((1.0 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)))) + (1.0*(0.32 * lV)/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) + (1.0*(0.28 * (-6.30000000000000004e-02))/(((((0.000335462627902512 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*(0.2 * lV)/(1.00000000000000002e-03))) * exp(1.0*((- 0.2) * (-6.30000000000000004e-02))/(1.00000000000000002e-03))) - ((1.0 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03))))) - (1.0*(0.32 * (-6.30000000000000004e-02))/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) + (1.0*(11.2 * (1.00000000000000002e-03))/(((((0.000335462627902512 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*(0.2 * lV)/(1.00000000000000002e-03))) * exp(1.0*((- 0.2) * (-6.30000000000000004e-02))/(1.00000000000000002e-03))) - ((1.0 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03))))) - (1.0*(4.16 * (1.00000000000000002e-03))/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))));
            double _m = (- _BA_m) + ((_BA_m + lm) * exp(DT * ((((((1.0*((- 0.28) * lV)/(((((0.000335462627902512 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*(0.2 * lV)/(1.00000000000000002e-03))) * exp(1.0*((- 0.2) * (-6.30000000000000004e-02))/(1.00000000000000002e-03))) - ((1.0 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)))) + (1.0*(0.32 * lV)/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) + (1.0*(0.28 * (-6.30000000000000004e-02))/(((((0.000335462627902512 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*(0.2 * lV)/(1.00000000000000002e-03))) * exp(1.0*((- 0.2) * (-6.30000000000000004e-02))/(1.00000000000000002e-03))) - ((1.0 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03))))) - (1.0*(0.32 * (-6.30000000000000004e-02))/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) + (1.0*(11.2 * (1.00000000000000002e-03))/(((((0.000335462627902512 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*(0.2 * lV)/(1.00000000000000002e-03))) * exp(1.0*((- 0.2) * (-6.30000000000000004e-02))/(1.00000000000000002e-03))) - ((1.0 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03))))) - (1.0*(4.16 * (1.00000000000000002e-03))/((((- 1.0) * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) + ((((25.7903399171931 * (_brian_pow((1.00000000000000002e-03), 1.0))) * (1.00000000000000002e-03)) * exp(1.0*((- 0.25) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.25 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))))));
            double _BA_n = 1.0*(((1.0*((- 0.032) * lV)/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))) + (1.0*(0.032 * (-6.30000000000000004e-02))/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) + (1.0*(0.48 * (1.00000000000000002e-03))/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))))/((((1.0*(0.032 * lV)/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))) - (1.0*(0.032 * (-6.30000000000000004e-02))/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) - (1.0*(0.48 * (1.00000000000000002e-03))/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) - (1.0*((0.642012708343871 * exp(1.0*((- 0.025) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.025 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))/(1.00000000000000002e-03)));
            double _n = (- _BA_n) + ((_BA_n + ln) * exp(DT * ((((1.0*(0.032 * lV)/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03))))) - (1.0*(0.032 * (-6.30000000000000004e-02))/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) - (1.0*(0.48 * (1.00000000000000002e-03))/((((- 1.0) * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) + ((((20.0855369231877 * (1.00000000000000002e-03)) * (1.00000000000000002e-03)) * exp(1.0*((- 0.2) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.2 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))))) - (1.0*((0.642012708343871 * exp(1.0*((- 0.025) * lV)/(1.00000000000000002e-03))) * exp(1.0*(0.025 * (-6.30000000000000004e-02))/(1.00000000000000002e-03)))/(1.00000000000000002e-03)))));
            lV = _V;
            lg_PN_iKC = _g_PN_iKC;
            lh = _h;
            lm = _m;
            ln = _n;
            char _cond = (lV > (0 * (1.00000000000000002e-03))) && lnot_refractory;
            // test for and register a true spike
            if (_cond) {
                const unsigned int spkIdx = atomicAdd(&shSpkCount, 1);
                shSpk[spkIdx] = lid;
                // spike reset code
                llastspike = t;
                lnot_refractory = false;
            }
            group->i[lid] = li;
            group->V[lid] = lV;
            group->g_PN_iKC[lid] = lg_PN_iKC;
            group->h[lid] = lh;
            group->m[lid] = lm;
            group->n[lid] = ln;
            group->lastspike[lid] = llastspike;
            group->not_refractory[lid] = lnot_refractory;
        }
        __syncthreads();
        if(threadIdx.x == 0) {
            if (shSpkCount > 0) {
                shPosSpk = atomicAdd(&group->spkCnt[0], shSpkCount);
            }
        }
        __syncthreads();
        if(threadIdx.x < shSpkCount) {
            const unsigned int n = shSpk[threadIdx.x];
            group->spk[shPosSpk + threadIdx.x] = n;
        }
    }
}
void updateNeurons(double t) {
     {
        const dim3 threads(32, 1);
        const dim3 grid(1, 1);
        neuronSpikeQueueUpdateKernel<<<grid, threads>>>();
        CHECK_CUDA_ERRORS(cudaPeekAtLastError());
    }
     {
        const dim3 threads(32, 1);
        const dim3 grid(87, 1);
        updateNeuronsKernel<<<grid, threads>>>(t);
        CHECK_CUDA_ERRORS(cudaPeekAtLastError());
    }
}
