WARNING: clusterbot not installed. Can't notify slack.
2021-08-12 07:39:25  Turning off  compiler optimizations for fast compilation
                     Suppressing compiler warnings
                     Running with the following prefs combinations:

                     1 run with default preferences
                     

Running tests in /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/frozen_repos/brian2/brian2, /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/brian2cuda/tests  (including long tests)
Running Brian version 2.2.2.1+git from '/home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/frozen_repos/brian2/brian2'
Testing standalone

Testing standalone device "cuda_standalone"
Running standalone-compatible standard tests (single run statement)
============================= test session starts ==============================
platform linux2 -- Python 2.7.18, pytest-4.6.4, py-1.10.0, pluggy-0.12.0 -- /home/denis/.conda/envs/b2c/bin/python
cachedir: .pytest_cache
rootdir: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository, inifile: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/frozen_repos/brian2/brian2/tests/pytest.ini
collecting ... collected 698 items / 698 deselected

=============================== warnings summary ===============================
/home/denis/.conda/envs/b2c/lib/python2.7/site-packages/_pytest/mark/structures.py:334
  /home/denis/.conda/envs/b2c/lib/python2.7/site-packages/_pytest/mark/structures.py:334: PytestUnknownMarkWarning: Unknown pytest.mark.cuda_standalone - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    PytestUnknownMarkWarning,

-- Docs: https://docs.pytest.org/en/latest/warnings.html
================== 698 deselected, 1 warnings in 2.38 seconds ==================
Running standalone-compatible standard tests (multiple run statements)
============================= test session starts ==============================
platform linux2 -- Python 2.7.18, pytest-4.6.4, py-1.10.0, pluggy-0.12.0 -- /home/denis/.conda/envs/b2c/bin/python
cachedir: .pytest_cache
rootdir: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository, inifile: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/frozen_repos/brian2/brian2/tests/pytest.ini
collecting ... collected 698 items / 698 deselected

======================== 698 deselected in 2.10 seconds ========================
Running standalone-specific tests
============================= test session starts ==============================
platform linux2 -- Python 2.7.18, pytest-4.6.4, py-1.10.0, pluggy-0.12.0 -- /home/denis/.conda/envs/b2c/bin/python
cachedir: .pytest_cache
rootdir: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository, inifile: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/frozen_repos/brian2/brian2/tests/pytest.ini
collecting ... collected 698 items / 692 deselected / 6 selected

../../tests/test_gpu_detection.py::test_wrong_cuda_path_error PASSED     [ 16%]
../../tests/test_gpu_detection.py::test_manual_setting_compute_capability PASSED [ 33%]
../../tests/test_gpu_detection.py::test_unsupported_compute_capability_error PASSED [ 50%]
../../tests/test_gpu_detection.py::test_warning_compute_capability_set_twice PASSED [ 66%]
../../tests/test_gpu_detection.py::test_no_gpu_detection_preference_error None
FAILED [ 83%]
../../tests/test_gpu_detection.py::test_no_gpu_detection_preference PASSED [100%]

=================================== FAILURES ===================================
____________________ test_no_gpu_detection_preference_error ____________________

    @pytest.mark.cuda_standalone
    @pytest.mark.standalone_only
    def test_no_gpu_detection_preference_error():
        set_device("cuda_standalone", directory=None)
        prefs.devices.cuda_standalone.cuda_backend.detect_gpus = False
        # needs setting gpu_id and compute_capability as well
        print(prefs.devices.cuda_standalone.__dict__)
        with pytest.raises(PreferenceError):
>           run(0*ms)
E           Failed: DID NOT RAISE <class 'brian2.core.preferences.PreferenceError'>

../../tests/test_gpu_detection.py:86: Failed
----------------------------- Captured stdout call -----------------------------
{'_basename': 'devices.cuda_standalone', '_subcategories': ['devices.cuda_standalone.cuda_backend'], '_preferences': ['extra_threshold_kernel', 'syn_launch_bounds', 'SM_multiplier', 'default_functions_integral_convertion', 'parallel_blocks', 'no_post_references', 'random_number_generator_ordering', 'random_number_generator_type', 'no_pre_references', 'push_synapse_bundles', 'calc_occupancy', 'launch_bounds', 'use_atomics'], '_all_prefs': <BrianGlobalPreferences with top-level categories: "core", "logging", "devices", "codegen", "legacy", "GSL">, '__doc__': 'CUDA standalone preferences\n\n``devices.cuda_standalone.SM_multiplier`` = ``1``\n    \n    The number of blocks per SM. By default, this value is set to 1.\n    \n\n``devices.cuda_standalone.calc_occupancy`` = ``True``\n    \n    Weather or not to use cuda occupancy api to choose num_threads and num_blocks.\n    \n\n``devices.cuda_standalone.default_functions_integral_convertion`` = ``float64``\n    The floating point precision to which integral types will be converted when\n    passed as arguments to default functions that have no integral type overload in device\n    code (sin, cos, tan, sinh, cosh, tanh, exp, log, log10, sqrt, ceil, floor, arcsin, arccos, arctan)."\n    NOTE: Convertion from 32bit and 64bit integral types to single precision (32bit) floating-point\n    types is not type safe. And convertion from 64bit integral types to double precision (64bit)\n    floating-point types neither. In those cases the closest higher or lower (implementation\n    defined) representable value will be selected.\n\n``devices.cuda_standalone.extra_threshold_kernel`` = ``True``\n    \n    Weather or not to use a extra threshold kernel for resetting or not.\n    \n\n``devices.cuda_standalone.launch_bounds`` = ``False``\n    \n    Weather or not to use `__launch_bounds__` to optimise register usage in kernels.\n    \n\n``devices.cuda_standalone.no_post_references`` = ``False``\n    Set this preference if you don\'t need access to ``j`` in any\n    synaptic code string and no Synapses object applies effects to\n    postsynaptic variables. This preference is for memory optimization until\n    unnecassary device memory allocations in synapse creation are fixed, it\n    is only relevant if your network uses close to all memory.\n\n``devices.cuda_standalone.no_pre_references`` = ``False``\n    Set this preference if you don\'t need access to ``i`` in any\n    synaptic code string and no Synapses object applies effects to\n    presynaptic variables. This preference is for memory optimization until\n    unnecassary device memory allocations in synapse creation are fixed, it\n    is only relevant if your network uses close to all memory.\n\n``devices.cuda_standalone.parallel_blocks`` = ``None``\n    \n    The total number of parallel blocks to use. The default is the number\n    of streaming multiprocessors.\n    \n\n``devices.cuda_standalone.push_synapse_bundles`` = ``True``\n    If True, synaptic events are propagated by pushing bundles of\n    synapse IDs with same delays into the corresponding delay queue. If\n    False, each synapse of a spiking neuron is pushed in the corresponding\n    queue individually. For very small bundle sizes (number of synapses\n    with same delay, connected to a single neuron), pushing single Synapses\n    can be faster. This option only has effect for `Synapses` objects ith\n    heterogenous delays.\n\n``devices.cuda_standalone.random_number_generator_ordering`` = ``False``\n    The ordering parameter (str) used to choose how the results of cuRAND\n    random number generation are ordered in global memory.\n    See cuRAND documentation for more details on generator types and orderings.\n\n``devices.cuda_standalone.random_number_generator_type`` = ``\'CURAND_RNG_PSEUDO_DEFAULT\'``\n    Generator type (str) that cuRAND uses for random number generation.\n    Setting the generator type automatically resets the generator ordering\n    (prefs.devices.cuda_standalone.random_number_generator_ordering) to its default value.\n    See cuRAND documentation for more details on generator types and orderings.\n\n``devices.cuda_standalone.syn_launch_bounds`` = ``False``\n    \n    Weather or not to use `__launch_bounds__` in synapses and synapses_push to optimise register usage in kernels.\n    \n\n``devices.cuda_standalone.use_atomics`` = ``True``\n    Weather to try to use atomic operations for synaptic effect\n    application. Since this avoids race conditions, effect application can\n    be parallelised.\n\n'}
INFO: setting cudaDevice stuff took 0.304384 seconds
objects cu num par blocks 3
INFO: _init_arrays() took 0.11702s
INFO: main_lines took 0.000036 seconds
INFO: main function took 0.421665 seconds
INFO _last_run_time = 9.88131291682e-324 s
============= 1 failed, 5 passed, 692 deselected in 39.64 seconds ==============
ERROR: 3/3 test suite(s) did not complete successfully (see above).
2021-08-12 07:40:09  
TARGET: CUDA_STANDALONE
2021-08-12 07:40:09  
FINISHED ALL RUNS

                     1/1 CONFIGURATIONS FAILED:
                     	1. run
                     		default preferences
Test suite took 0 h 0 m 45 s.
