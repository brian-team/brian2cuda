WARNING: clusterbot not installed. Can't notify slack.
2021-08-12 07:57:38  Turning off  compiler optimizations for fast compilation
                     Suppressing compiler warnings
                     Running with the following prefs combinations:

                     1 run with default preferences
                     

Running tests in /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/frozen_repos/brian2/brian2, /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/brian2cuda/tests  (including long tests)
Running Brian version 2.2.2.1+git from '/home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/frozen_repos/brian2/brian2'
Testing standalone

Testing standalone device "cuda_standalone"
Running standalone-compatible standard tests (single run statement)
============================= test session starts ==============================
platform linux2 -- Python 2.7.18, pytest-4.6.4, py-1.10.0, pluggy-0.12.0 -- /home/denis/.conda/envs/b2c/bin/python
cachedir: .pytest_cache
rootdir: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository, inifile: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/frozen_repos/brian2/brian2/tests/pytest.ini
collecting ... collected 698 items / 698 deselected

=============================== warnings summary ===============================
/home/denis/.conda/envs/b2c/lib/python2.7/site-packages/_pytest/mark/structures.py:334
  /home/denis/.conda/envs/b2c/lib/python2.7/site-packages/_pytest/mark/structures.py:334: PytestUnknownMarkWarning: Unknown pytest.mark.cuda_standalone - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    PytestUnknownMarkWarning,

-- Docs: https://docs.pytest.org/en/latest/warnings.html
================== 698 deselected, 1 warnings in 2.03 seconds ==================
Running standalone-compatible standard tests (multiple run statements)
============================= test session starts ==============================
platform linux2 -- Python 2.7.18, pytest-4.6.4, py-1.10.0, pluggy-0.12.0 -- /home/denis/.conda/envs/b2c/bin/python
cachedir: .pytest_cache
rootdir: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository, inifile: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/frozen_repos/brian2/brian2/tests/pytest.ini
collecting ... collected 698 items / 698 deselected

======================== 698 deselected in 1.72 seconds ========================
Running standalone-specific tests
============================= test session starts ==============================
platform linux2 -- Python 2.7.18, pytest-4.6.4, py-1.10.0, pluggy-0.12.0 -- /home/denis/.conda/envs/b2c/bin/python
cachedir: .pytest_cache
rootdir: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository, inifile: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/frozen_repos/brian2/brian2/tests/pytest.ini
collecting ... collected 698 items / 692 deselected / 6 selected

../../tests/test_gpu_detection.py::test_wrong_cuda_path_error PASSED     [ 16%]
../../tests/test_gpu_detection.py::test_manual_setting_compute_capability PASSED [ 33%]None

../../tests/test_gpu_detection.py::test_manual_setting_compute_capability ERROR [ 33%]
../../tests/test_gpu_detection.py::test_unsupported_compute_capability_error PASSED [ 50%]None

../../tests/test_gpu_detection.py::test_unsupported_compute_capability_error ERROR [ 50%]
../../tests/test_gpu_detection.py::test_warning_compute_capability_set_twice PASSED [ 66%]None

../../tests/test_gpu_detection.py::test_warning_compute_capability_set_twice ERROR [ 66%]
../../tests/test_gpu_detection.py::test_no_gpu_detection_preference_error None
FAILED [ 83%]None

../../tests/test_gpu_detection.py::test_no_gpu_detection_preference_error ERROR [ 83%]
../../tests/test_gpu_detection.py::test_no_gpu_detection_preference PASSED [100%]None

../../tests/test_gpu_detection.py::test_no_gpu_detection_preference ERROR [100%]

==================================== ERRORS ====================================
_________ ERROR at teardown of test_manual_setting_compute_capability __________

    @pytest.fixture(autouse=True)
    def reset_cuda_detection():
        # these function store, reset and restore the global _cuda_installation dictionary
        backup = get_cuda_installation()
        reset_cuda_installation()
        yield
>       restore_cuda_installation(backup)

../../tests/test_gpu_detection.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cuda_installation = {'cuda_path': '/opt/cuda', 'nvcc_path': '/opt/cuda/bin/nvcc', 'runtime_version': 11.3}

    def restore_cuda_installation(cuda_installation):
        """Set global cuda installation dictionary to `cuda_installation`"""
        global _cuda_installation
        if _cuda_installation.keys() != cuda_installation.keys():
            raise KeyError(
                "`cuda_installation` has to have the following keys: {}. Got instead: "
>               "{}".format(cuda_installation.keys(), _cuda_installation.keys())
            )
E           KeyError: "`cuda_installation` has to have the following keys: ['cuda_path', 'nvcc_path', 'runtime_version']. Got instead: ['runtime_version', 'cuda_path', 'nvcc_path']"

../../utils/gputools.py:151: KeyError
----------------------------- Captured stdout call -----------------------------
INFO: setting cudaDevice stuff took 1.023464 seconds
objects cu num par blocks 3
INFO: _init_arrays() took 0.089228s
INFO: main_lines took 0.000025 seconds
INFO: main function took 1.112856 seconds
INFO _last_run_time = 9.88131291682e-324 s
________ ERROR at teardown of test_unsupported_compute_capability_error ________

    @pytest.fixture(autouse=True)
    def reset_cuda_detection():
        # these function store, reset and restore the global _cuda_installation dictionary
        backup = get_cuda_installation()
        reset_cuda_installation()
        yield
>       restore_cuda_installation(backup)

../../tests/test_gpu_detection.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cuda_installation = {'cuda_path': '/opt/cuda', 'nvcc_path': '/opt/cuda/bin/nvcc', 'runtime_version': 11.3}

    def restore_cuda_installation(cuda_installation):
        """Set global cuda installation dictionary to `cuda_installation`"""
        global _cuda_installation
        if _cuda_installation.keys() != cuda_installation.keys():
            raise KeyError(
                "`cuda_installation` has to have the following keys: {}. Got instead: "
>               "{}".format(cuda_installation.keys(), _cuda_installation.keys())
            )
E           KeyError: "`cuda_installation` has to have the following keys: ['cuda_path', 'nvcc_path', 'runtime_version']. Got instead: ['runtime_version', 'cuda_path', 'nvcc_path']"

../../utils/gputools.py:151: KeyError
________ ERROR at teardown of test_warning_compute_capability_set_twice ________

    @pytest.fixture(autouse=True)
    def reset_cuda_detection():
        # these function store, reset and restore the global _cuda_installation dictionary
        backup = get_cuda_installation()
        reset_cuda_installation()
        yield
>       restore_cuda_installation(backup)

../../tests/test_gpu_detection.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cuda_installation = {'cuda_path': '/opt/cuda', 'nvcc_path': '/opt/cuda/bin/nvcc', 'runtime_version': 11.3}

    def restore_cuda_installation(cuda_installation):
        """Set global cuda installation dictionary to `cuda_installation`"""
        global _cuda_installation
        if _cuda_installation.keys() != cuda_installation.keys():
            raise KeyError(
                "`cuda_installation` has to have the following keys: {}. Got instead: "
>               "{}".format(cuda_installation.keys(), _cuda_installation.keys())
            )
E           KeyError: "`cuda_installation` has to have the following keys: ['cuda_path', 'nvcc_path', 'runtime_version']. Got instead: ['runtime_version', 'cuda_path', 'nvcc_path']"

../../utils/gputools.py:151: KeyError
----------------------------- Captured stdout call -----------------------------
INFO: setting cudaDevice stuff took 1.034910 seconds
objects cu num par blocks 3
INFO: _init_arrays() took 0.090367s
INFO: main_lines took 0.000026 seconds
INFO: main function took 1.125455 seconds
INFO _last_run_time = 9.88131291682e-324 s
_________ ERROR at teardown of test_no_gpu_detection_preference_error __________

    @pytest.fixture(autouse=True)
    def reset_cuda_detection():
        # these function store, reset and restore the global _cuda_installation dictionary
        backup = get_cuda_installation()
        reset_cuda_installation()
        yield
>       restore_cuda_installation(backup)

../../tests/test_gpu_detection.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cuda_installation = {'cuda_path': '/opt/cuda', 'nvcc_path': '/opt/cuda/bin/nvcc', 'runtime_version': 11.3}

    def restore_cuda_installation(cuda_installation):
        """Set global cuda installation dictionary to `cuda_installation`"""
        global _cuda_installation
        if _cuda_installation.keys() != cuda_installation.keys():
            raise KeyError(
                "`cuda_installation` has to have the following keys: {}. Got instead: "
>               "{}".format(cuda_installation.keys(), _cuda_installation.keys())
            )
E           KeyError: "`cuda_installation` has to have the following keys: ['cuda_path', 'nvcc_path', 'runtime_version']. Got instead: ['runtime_version', 'cuda_path', 'nvcc_path']"

../../utils/gputools.py:151: KeyError
----------------------------- Captured stdout call -----------------------------
INFO: setting cudaDevice stuff took 0.268882 seconds
objects cu num par blocks 3
INFO: _init_arrays() took 0.094348s
INFO: main_lines took 0.000026 seconds
INFO: main function took 0.363421 seconds
INFO _last_run_time = 9.88131291682e-324 s
____________ ERROR at teardown of test_no_gpu_detection_preference _____________

    @pytest.fixture(autouse=True)
    def reset_cuda_detection():
        # these function store, reset and restore the global _cuda_installation dictionary
        backup = get_cuda_installation()
        reset_cuda_installation()
        yield
>       restore_cuda_installation(backup)

../../tests/test_gpu_detection.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cuda_installation = {'cuda_path': '/opt/cuda', 'nvcc_path': '/opt/cuda/bin/nvcc', 'runtime_version': 11.3}

    def restore_cuda_installation(cuda_installation):
        """Set global cuda installation dictionary to `cuda_installation`"""
        global _cuda_installation
        if _cuda_installation.keys() != cuda_installation.keys():
            raise KeyError(
                "`cuda_installation` has to have the following keys: {}. Got instead: "
>               "{}".format(cuda_installation.keys(), _cuda_installation.keys())
            )
E           KeyError: "`cuda_installation` has to have the following keys: ['cuda_path', 'nvcc_path', 'runtime_version']. Got instead: ['runtime_version', 'cuda_path', 'nvcc_path']"

../../utils/gputools.py:151: KeyError
----------------------------- Captured stdout call -----------------------------
INFO: setting cudaDevice stuff took 0.258717 seconds
objects cu num par blocks 3
INFO: _init_arrays() took 0.095235s
INFO: main_lines took 0.000026 seconds
INFO: main function took 0.354120 seconds
INFO _last_run_time = 9.88131291682e-324 s
=================================== FAILURES ===================================
____________________ test_no_gpu_detection_preference_error ____________________

    @pytest.mark.cuda_standalone
    @pytest.mark.standalone_only
    def test_no_gpu_detection_preference_error():
        set_device("cuda_standalone", directory=None)
        # reset cuda installation, such that it will be detected again during `run()`
        prefs.devices.cuda_standalone.cuda_backend.detect_gpus = False
        # needs setting gpu_id and compute_capability as well
        with pytest.raises(PreferenceError):
>           run(0*ms)
E           Failed: DID NOT RAISE <class 'brian2.core.preferences.PreferenceError'>

../../tests/test_gpu_detection.py:92: Failed
----------------------------- Captured stdout call -----------------------------
INFO: setting cudaDevice stuff took 0.268882 seconds
objects cu num par blocks 3
INFO: _init_arrays() took 0.094348s
INFO: main_lines took 0.000026 seconds
INFO: main function took 0.363421 seconds
INFO _last_run_time = 9.88131291682e-324 s
========= 1 failed, 5 passed, 692 deselected, 5 error in 31.41 seconds =========
ERROR: 3/3 test suite(s) did not complete successfully (see above).
2021-08-12 07:58:13  
TARGET: CUDA_STANDALONE
2021-08-12 07:58:13  
FINISHED ALL RUNS

                     1/1 CONFIGURATIONS FAILED:
                     	1. run
                     		default preferences
Test suite took 0 h 0 m 37 s.
