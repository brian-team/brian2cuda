WARNING: clusterbot not installed. Can't notify slack.
2021-08-12 08:10:54  Turning off  compiler optimizations for fast compilation
                     Suppressing compiler warnings
                     Running with the following prefs combinations:

                     1 run with default preferences
                     

Running tests in /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/frozen_repos/brian2/brian2, /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/brian2cuda/tests  (including long tests)
Running Brian version 2.2.2.1+git from '/home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/frozen_repos/brian2/brian2'
Testing standalone

Testing standalone device "cuda_standalone"
Running standalone-compatible standard tests (single run statement)
============================= test session starts ==============================
platform linux2 -- Python 2.7.18, pytest-4.6.4, py-1.10.0, pluggy-0.12.0 -- /home/denis/.conda/envs/b2c/bin/python
cachedir: .pytest_cache
rootdir: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository, inifile: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/frozen_repos/brian2/brian2/tests/pytest.ini
collecting ... collected 698 items / 698 deselected

=============================== warnings summary ===============================
/home/denis/.conda/envs/b2c/lib/python2.7/site-packages/_pytest/mark/structures.py:334
  /home/denis/.conda/envs/b2c/lib/python2.7/site-packages/_pytest/mark/structures.py:334: PytestUnknownMarkWarning: Unknown pytest.mark.cuda_standalone - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    PytestUnknownMarkWarning,

-- Docs: https://docs.pytest.org/en/latest/warnings.html
================== 698 deselected, 1 warnings in 2.14 seconds ==================
Running standalone-compatible standard tests (multiple run statements)
============================= test session starts ==============================
platform linux2 -- Python 2.7.18, pytest-4.6.4, py-1.10.0, pluggy-0.12.0 -- /home/denis/.conda/envs/b2c/bin/python
cachedir: .pytest_cache
rootdir: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository, inifile: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/frozen_repos/brian2/brian2/tests/pytest.ini
collecting ... collected 698 items / 698 deselected

======================== 698 deselected in 1.74 seconds ========================
Running standalone-specific tests
============================= test session starts ==============================
platform linux2 -- Python 2.7.18, pytest-4.6.4, py-1.10.0, pluggy-0.12.0 -- /home/denis/.conda/envs/b2c/bin/python
cachedir: .pytest_cache
rootdir: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository, inifile: /home/denis/tubcloud/home/projects/brian2cuda/brian2cuda_repository/frozen_repos/brian2/brian2/tests/pytest.ini
collecting ... collected 698 items / 692 deselected / 6 selected

../../tests/test_gpu_detection.py::test_wrong_cuda_path_error PASSED     [ 16%]
../../tests/test_gpu_detection.py::test_manual_setting_compute_capability PASSED [ 33%]
../../tests/test_gpu_detection.py::test_unsupported_compute_capability_error None
ERROR [ 50%]
../../tests/test_gpu_detection.py::test_warning_compute_capability_set_twice None
ERROR [ 66%]
../../tests/test_gpu_detection.py::test_no_gpu_detection_preference_error None
ERROR [ 83%]
../../tests/test_gpu_detection.py::test_no_gpu_detection_preference None
ERROR [100%]

==================================== ERRORS ====================================
_________ ERROR at setup of test_unsupported_compute_capability_error __________

    @pytest.fixture()
    def reset_gpu_detection():
        # these function store, reset and restore the global _cuda_installation dictionary
>       backup = get_gpu_selection()

../../tests/test_gpu_detection.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def get_gpu_selection():
        """Return dictionary of selected gpu variable"""
        gpu_id, compute_capability = select_gpu()
        gpu_selection = {
            'available_gpus': get_available_gpus(),
            'selected_gpu_id': gpu_id,
            'selected_gpu_compute_capability': compute_capability,
        }
        global _gpu_selection
>       assert gpu_selection.keys() == _gpu_selection.keys()
E       AssertionError

../../utils/gputools.py:95: AssertionError
_________ ERROR at setup of test_warning_compute_capability_set_twice __________

    @pytest.fixture()
    def reset_gpu_detection():
        # these function store, reset and restore the global _cuda_installation dictionary
>       backup = get_gpu_selection()

../../tests/test_gpu_detection.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def get_gpu_selection():
        """Return dictionary of selected gpu variable"""
        gpu_id, compute_capability = select_gpu()
        gpu_selection = {
            'available_gpus': get_available_gpus(),
            'selected_gpu_id': gpu_id,
            'selected_gpu_compute_capability': compute_capability,
        }
        global _gpu_selection
>       assert gpu_selection.keys() == _gpu_selection.keys()
E       AssertionError

../../utils/gputools.py:95: AssertionError
___________ ERROR at setup of test_no_gpu_detection_preference_error ___________

    @pytest.fixture()
    def reset_gpu_detection():
        # these function store, reset and restore the global _cuda_installation dictionary
>       backup = get_gpu_selection()

../../tests/test_gpu_detection.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def get_gpu_selection():
        """Return dictionary of selected gpu variable"""
        gpu_id, compute_capability = select_gpu()
        gpu_selection = {
            'available_gpus': get_available_gpus(),
            'selected_gpu_id': gpu_id,
            'selected_gpu_compute_capability': compute_capability,
        }
        global _gpu_selection
>       assert gpu_selection.keys() == _gpu_selection.keys()
E       AssertionError

../../utils/gputools.py:95: AssertionError
______________ ERROR at setup of test_no_gpu_detection_preference ______________

    @pytest.fixture()
    def reset_gpu_detection():
        # these function store, reset and restore the global _cuda_installation dictionary
>       backup = get_gpu_selection()

../../tests/test_gpu_detection.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def get_gpu_selection():
        """Return dictionary of selected gpu variable"""
        gpu_id, compute_capability = select_gpu()
        gpu_selection = {
            'available_gpus': get_available_gpus(),
            'selected_gpu_id': gpu_id,
            'selected_gpu_compute_capability': compute_capability,
        }
        global _gpu_selection
>       assert gpu_selection.keys() == _gpu_selection.keys()
E       AssertionError

../../utils/gputools.py:95: AssertionError
============== 2 passed, 692 deselected, 4 error in 12.22 seconds ==============
ERROR: 3/3 test suite(s) did not complete successfully (see above).
2021-08-12 08:11:10  
TARGET: CUDA_STANDALONE
2021-08-12 08:11:10  
FINISHED ALL RUNS

                     1/1 CONFIGURATIONS FAILED:
                     	1. run
                     		default preferences
Test suite took 0 h 0 m 18 s.
